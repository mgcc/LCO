https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

- Most web apps need resources from other web apps or other domains: Cross Origin Resource sharing
- We can host our own images, styles (server 1). Same Origin Request
- Other domains can also access another domain's resources (server 2, refer to port 3000)
  - charmander.png
  - style.css
  - https://cdn.bulbagarden.net/upload/thumb/2/21/001Bulbasaur.png/250px-001Bulbasaur.png

- Server1 can access it's own API, but server2 trying to access the same API will run into Cross-Origin Restrictions

Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to let a user agent gain permission to access selected resources from a server on a different origin (domain) than the site currently in use. A user agent makes a cross-origin HTTP request when it requests a resource from a different domain, protocol, or port than the one from which the current document originated.

Waived in: img src, CDN

The Cross-Origin Resource Sharing standard works by adding new HTTP headers that allow servers to describe the set of origins that are permitted to read that information using a web browser.  Additionally, for HTTP request methods that can cause side-effects on server's data (in particular, for HTTP methods other than GET, or for POST usage with certain MIME types), the specification mandates that browsers "preflight" the request, soliciting supported methods from the server with an HTTP OPTIONS request method, and then, upon "approval" from the server, sending the actual request with the actual HTTP request method. Servers can also notify clients whether "credentials" (including Cookies and HTTP Authentication data) should be sent with requests.

- The server that holds the resources needs to set additional headers to indicate which specific domains can access specific resources
- Server 1 ( * make all accessible )
- Access-Control Headers are new to HTML5 and allow cross origin resource sharing